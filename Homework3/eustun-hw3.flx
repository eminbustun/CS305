%{
#include "eustun-hw3.h"
#include "eustun-hw3.tab.h"
#include <stdlib.h>
#include <string.h>

int nested = 0;
int lineCount = 1;
%}

tNEWLINE \n

tLOCALPART [A-Za-z0-9\-_]+(([A-Za-z0-9\-_]*|\.?)[A-Za-z0-9\-_])*
tDOMAIN [A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+|[A-Za-z0-9]{1}

/* Comments */
tSLC  "//" 
tOMLC "/\*" 
tCMLC "*/"   


%x singleLineComment multiLineComment
%%
{tSLC}  BEGIN(singleLineComment);
<singleLineComment>{tNEWLINE}    {BEGIN(INITIAL);}
<singleLineComment>.    ;


{tOMLC} {BEGIN(multiLineComment); ++nested;}
<multiLineComment>{tCMLC}      { if (--nested == 0) BEGIN(INITIAL); }
<multiLineComment>{tOMLC}     ++nested;
<multiLineComment>{tNEWLINE}    {} ;
<multiLineComment>.         ;

"Mail" {
    
    return tMAIL;
    
}

"end"[ \t\n\r\f]+"Mail" {

    return tENDMAIL;
    }
    
"schedule" return tSCHEDULE;
"end"[ \t\n\r\f]+"schedule" {return tENDSCHEDULE;}

"send" {
    yylval.sendLineNode.lineNum = lineCount;
    return  tSEND;
}
"set" return tSET;
"to" return tTO;
"from" return tFROM;
@ return tAT;
, return tCOMMA;
: return tCOLON;
\( return tLPR;
\) return tRPR;
\[ return tLBR;
\] return tRBR;
[a-zA-Z\_]+[a-zA-Z0-9\_]* {
    yylval.variableNode.lineNum = lineCount;

    char *result = (char *)malloc(strlen(yytext));
    strcpy(result,yytext);
    yylval.variableNode.value = result;
    return tIDENT;
    }
["][^\"]*["] {
    yylval.variableNode.lineNum = lineCount;

    char *result = (char *)malloc(strlen(yytext));
    strncpy(result, yytext + 1, strlen(yytext) - 2);
    result[strlen(yytext) - 2] = '\0';

    yylval.variableNode.value = result;
    
    return tSTRING;
    }

[0-9]{2}"/"[0-9]{2}"/"[0-9]{4}|[0-9]{2}\.[0-9]{2}\.[0-9]{4}|[0-9]{2}-[0-9]{2}-[0-9]{4} {
    
    yylval.scheduleNode.lineNum = lineCount;

    char *result = (char *)malloc(strlen(yytext));
    strncpy(result, yytext, strlen(yytext));
    // result[strlen(yytext) - 2] = '\0';

    yylval.scheduleNode.value = result;
   
    return tDATE;
    }

[0-9]{2}:[0-9]{2} {
   yylval.scheduleNode.lineNum = lineCount;

    char *result = (char *)malloc(strlen(yytext));
    strncpy(result, yytext, strlen(yytext));
    // result[strlen(yytext) - 2] = '\0';

    yylval.scheduleNode.value = result;
    return tTIME;
    }

{tLOCALPART}"@"({tDOMAIN}"."{tDOMAIN}"."{tDOMAIN}|{tDOMAIN}"."{tDOMAIN}) {
    
    char *result = (char *)malloc(strlen(yytext) + 1);
    strncpy(result, yytext, strlen(yytext));
    result[strlen(yytext)] = '\0';

    yylval.senderNode.value = result;
    return tADDRESS;
    }

[ \t]+
{tNEWLINE}    {lineCount += 1;}
.	    return yytext[0];
%%
